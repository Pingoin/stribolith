syntax = "proto3";
package open_pi_scope;

service OpenPiScopeServer{
    rpc GetGnssData (GnssDataRequest) returns (GnssDataResponse);
    rpc GetMagneticData (MagneticDataRequest) returns (MagneticDataResponse);
    rpc GetOrientationData(OrientationDataRequest)returns (OrientationDataResponse);
}

message GnssDataRequest{

}

message GnssDataResponse{
    GnssData gnss_data = 1;
}

message GnssData {
    double lat = 1;
    double lon = 2;
    float alt = 3;
    int32 leap_seconds = 4;
    float estimated_error_longitude = 5;
    float estimated_error_latitude = 6;
    float estimated_error_plane = 7;
    float estimated_error_altitude = 8;
    float track = 9;
    float speed = 10;
    float climb = 11;
    Mode mode = 12;
    float estimated_error_track = 13;
    float estimated_error_speed = 14;
    float estimated_error_climb = 15;
    repeated Satellite satellites = 16;
}

enum Mode {
    NO_FIX = 0;
    FIX_2D = 1;
    FIX_3D = 2;
}

message Satellite {
    int32 prn=1;
    float elevation=2;
    float azimuth=3;
    float signalStrength=4;
    bool used=5;
    GNSSSystem system=6;
    
}

enum GNSSSystem {
    GPS=0;
    SBAS=1;
    GALILEO=2;
    BEIDOU=3;
    IMES=4;
    QZSS=5;
    GLONASS=6;
    IRNSS=7;
}

message MagneticDataRequest{

}

message MagneticDataResponse{
    MagneticData magnetic_data = 1;
}

message MagneticData {
    // in degrees
    float declination = 1;
    // in degrees
    float inclination = 2;
    // in ÂµT
    float magnetic_flux_density= 3;
}

message Position{
    double latitude = 1;
    double longitude = 2;
    float altitude = 3;
}

message Quaternion{
    float j = 1;
    float i = 2;
    float k = 3;
    float w = 4;
}

message AlignmentData{
    Quaternion alignment=1;
    Quaternion correction=2;
}

message EulerAngle{
    float yaw = 1;
    float pitch = 2;
    float roll = 3;
}

message OrientationDataRequest{

}

message OrientationDataResponse{
    EulerAngle euler = 1;
    Quaternion quaternion = 2;
}

message Broadcast{
    uint32 magicNumber =1;
}

enum Constants{
    Null=0;
    MagicNumber = 0x8BDD542;
    BroadcastPort = 12961;
}
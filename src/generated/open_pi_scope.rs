// This file is @generated by prost-build.
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GnssDataRequest {}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GnssDataResponse {
    #[prost(message, optional, tag = "1")]
    pub gnss_data: ::core::option::Option<GnssData>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GnssData {
    #[prost(double, tag = "1")]
    pub lat: f64,
    #[prost(double, tag = "2")]
    pub lon: f64,
    #[prost(float, tag = "3")]
    pub alt: f32,
    #[prost(int32, tag = "4")]
    pub leap_seconds: i32,
    #[prost(float, tag = "5")]
    pub estimated_error_longitude: f32,
    #[prost(float, tag = "6")]
    pub estimated_error_latitude: f32,
    #[prost(float, tag = "7")]
    pub estimated_error_plane: f32,
    #[prost(float, tag = "8")]
    pub estimated_error_altitude: f32,
    #[prost(float, tag = "9")]
    pub track: f32,
    #[prost(float, tag = "10")]
    pub speed: f32,
    #[prost(float, tag = "11")]
    pub climb: f32,
    #[prost(enumeration = "Mode", tag = "12")]
    pub mode: i32,
    #[prost(float, tag = "13")]
    pub estimated_error_track: f32,
    #[prost(float, tag = "14")]
    pub estimated_error_speed: f32,
    #[prost(float, tag = "15")]
    pub estimated_error_climb: f32,
    #[prost(message, repeated, tag = "16")]
    pub satellites: ::prost::alloc::vec::Vec<Satellite>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Satellite {
    #[prost(int32, tag = "1")]
    pub prn: i32,
    #[prost(float, tag = "2")]
    pub elevation: f32,
    #[prost(float, tag = "3")]
    pub azimuth: f32,
    #[prost(float, tag = "4")]
    pub signal_strength: f32,
    #[prost(bool, tag = "5")]
    pub used: bool,
    #[prost(enumeration = "GnssSystem", tag = "6")]
    pub system: i32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MagneticDataRequest {}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MagneticDataResponse {
    #[prost(message, optional, tag = "1")]
    pub magnetic_data: ::core::option::Option<MagneticData>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MagneticData {
    /// in degrees
    #[prost(float, tag = "1")]
    pub declination: f32,
    /// in degrees
    #[prost(float, tag = "2")]
    pub inclination: f32,
    /// in ÂµT
    #[prost(float, tag = "3")]
    pub magnetic_flux_density: f32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Position {
    #[prost(double, tag = "1")]
    pub latitude: f64,
    #[prost(double, tag = "2")]
    pub longitude: f64,
    #[prost(float, tag = "3")]
    pub altitude: f32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Quaternion {
    #[prost(float, tag = "1")]
    pub j: f32,
    #[prost(float, tag = "2")]
    pub i: f32,
    #[prost(float, tag = "3")]
    pub k: f32,
    #[prost(float, tag = "4")]
    pub w: f32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AlignmentData {
    #[prost(message, optional, tag = "1")]
    pub alignment: ::core::option::Option<Quaternion>,
    #[prost(message, optional, tag = "2")]
    pub correction: ::core::option::Option<Quaternion>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EulerAngle {
    #[prost(float, tag = "1")]
    pub yaw: f32,
    #[prost(float, tag = "2")]
    pub pitch: f32,
    #[prost(float, tag = "3")]
    pub roll: f32,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrientationDataRequest {}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrientationDataResponse {
    #[prost(message, optional, tag = "1")]
    pub euler: ::core::option::Option<EulerAngle>,
    #[prost(message, optional, tag = "2")]
    pub quaternion: ::core::option::Option<Quaternion>,
}
#[derive(serde::Deserialize, serde::Serialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Broadcast {
    #[prost(uint32, tag = "1")]
    pub magic_number: u32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mode {
    NoFix = 0,
    Fix2d = 1,
    Fix3d = 2,
}
impl Mode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NoFix => "NO_FIX",
            Self::Fix2d => "FIX_2D",
            Self::Fix3d => "FIX_3D",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_FIX" => Some(Self::NoFix),
            "FIX_2D" => Some(Self::Fix2d),
            "FIX_3D" => Some(Self::Fix3d),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GnssSystem {
    Gps = 0,
    Sbas = 1,
    Galileo = 2,
    Beidou = 3,
    Imes = 4,
    Qzss = 5,
    Glonass = 6,
    Irnss = 7,
}
impl GnssSystem {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Gps => "GPS",
            Self::Sbas => "SBAS",
            Self::Galileo => "GALILEO",
            Self::Beidou => "BEIDOU",
            Self::Imes => "IMES",
            Self::Qzss => "QZSS",
            Self::Glonass => "GLONASS",
            Self::Irnss => "IRNSS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GPS" => Some(Self::Gps),
            "SBAS" => Some(Self::Sbas),
            "GALILEO" => Some(Self::Galileo),
            "BEIDOU" => Some(Self::Beidou),
            "IMES" => Some(Self::Imes),
            "QZSS" => Some(Self::Qzss),
            "GLONASS" => Some(Self::Glonass),
            "IRNSS" => Some(Self::Irnss),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Constants {
    Null = 0,
    MagicNumber = 146658626,
    BroadcastPort = 12961,
}
impl Constants {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Null => "Null",
            Self::MagicNumber => "MagicNumber",
            Self::BroadcastPort => "BroadcastPort",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Null" => Some(Self::Null),
            "MagicNumber" => Some(Self::MagicNumber),
            "BroadcastPort" => Some(Self::BroadcastPort),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod open_pi_scope_server_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct OpenPiScopeServerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl OpenPiScopeServerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> OpenPiScopeServerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> OpenPiScopeServerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            OpenPiScopeServerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_gnss_data(
            &mut self,
            request: impl tonic::IntoRequest<super::GnssDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GnssDataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/open_pi_scope.OpenPiScopeServer/GetGnssData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("open_pi_scope.OpenPiScopeServer", "GetGnssData"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_magnetic_data(
            &mut self,
            request: impl tonic::IntoRequest<super::MagneticDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MagneticDataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/open_pi_scope.OpenPiScopeServer/GetMagneticData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("open_pi_scope.OpenPiScopeServer", "GetMagneticData"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_orientation_data(
            &mut self,
            request: impl tonic::IntoRequest<super::OrientationDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::OrientationDataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/open_pi_scope.OpenPiScopeServer/GetOrientationData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "open_pi_scope.OpenPiScopeServer",
                        "GetOrientationData",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
